%PDF-1.3
%הדֿׂ
1 0 obj
<<
	/Type/Catalog
	/Pages 2 0 R
>>
endobj
2 0 obj
<<
	/Type/Pages
	/Count 4
	/Kids [8 0 R 11 0 R 14 0 R 17 0 R]
>>
endobj
3 0 obj
<<
	/ProcSet [/PDF/Text]
	/Font <</F0 4 0 R /F1 5 0 R>>
>>
endobj
4 0 obj
<<
	/Type/Font
	/Subtype/Type1
	/Encoding/WinAnsiEncoding
	/BaseFont/Helvetica
	/Name/F0
>>
endobj
5 0 obj
<<
	/Type/Font
	/Subtype/Type1
	/Encoding/WinAnsiEncoding
	/BaseFont/Courier
	/Name/F1
>>
endobj
6 0 obj
<<
	/Type/Font
	/Subtype/Type1
	/Encoding/WinAnsiEncoding
	/BaseFont/Arial
	/Name/F1
>>
endobj
7 0 obj
<<
	/Type/Font
	/Subtype/Type1
	/Encoding/WinAnsiEncoding
	/BaseFont/Times
	/Name/F1
>>
endobj
8 0 obj
<<
	/Type/Page
	/Parent 2 0 R
	/Resources 3 0 R
	/Mediabox [0 0 595 842]
	/Contents [9 0 R]
>>
endobj
9 0 obj
	<< /Length 10 0 R >>
stream
	q
	Q
	q
	1.0 0.0 0.0 1.0 20.0 762.0 cm
	BT
	/F1 12 Tf
	12 TL
	(module Pdf )Tj
	T*
	(  -- document part)Tj
	T*
	(  \( createPdf  -- :: PageSize -> [Page] -> String)Tj
	T*
	(  , createPage -- :: [Area] -> Page)Tj
	T*
	(  , A4         -- :: PageSize)Tj
	T*
	(  , pageSize   -- :: PageSize -> \(Int, Int, Int, Int\))Tj
	T*
	(  )Tj
	T*
	(  -- area part)Tj
	T*
	(  , position -- :: Block -> Float -> Float -> Area)Tj
	T*
	(  )Tj
	T*
	(  -- block part)Tj
	T*
	(  , textBlock  -- :: [Command] -> Block)Tj
	T*
	(  , over       -- :: Block -> Block -> Block)Tj
	T*
	(  , under      -- :: Block -> Block -> Block)Tj
	T*
	(  , rightAlign -- :: Block -> Block)Tj
	T*
	(  )Tj
	T*
	(  -- commands part)Tj
	T*
	(  , Helvetica -- :: Font)Tj
	T*
	(  , Courier   -- :: Font)Tj
	T*
	(  , Times     -- :: Font)Tj
	T*
	(  , Arial     -- :: Font)Tj
	T*
	(  , setFont   -- :: String -> Int -> Command )Tj
	T*
	(  , write     -- :: String -> Command)Tj
	T*
	(  , writeLn   -- :: String -> Command)Tj
	T*
	(  \) where)Tj
	T*
	(---------------------------------------------------------------------)Tj
	T*
	(-- the datatypes)Tj
	T*
	(type Object = String)Tj
	T*
	(data Command )Tj
	T*
	(  = Td Int Int)Tj
	T*
	(  | Tf String Int)Tj
	T*
	(  | TL Int)Tj
	T*
	(  | Quote String)Tj
	T*
	(  | Tj String)Tj
	T*
	(  | Tc Int)Tj
	T*
	(  | Tw Int)Tj
	T*
	(  | Tr Int)Tj
	T*
	(  | Tz Int)Tj
	T*
	(  | G Int)Tj
	T*
	(  | T')Tj
	T*
	(  | Cm Float Float Float Float Float Float)Tj
	T*
	(  | BT)Tj
	T*
	(  | ET)Tj
	T*
	(  | Qq)Tj
	T*
	(  | Q)Tj
	T*
	(data Block = Block [Command])Tj
	T*
	(type Area = \(Float, Float, Block\))Tj
	T*
	(type Page = [Area])Tj
	T*
	(data Font )Tj
	T*
	(  = Helvetica)Tj
	T*
	(  | Courier)Tj
	T*
	(  | Times)Tj
	T*
	(  | Arial)Tj
	T*
	(data PageSize = A4)Tj
	T*
	(  )Tj
	T*
	(---------------------------------------------------------------------)Tj
	T*
	(-- exported functions)Tj
	T*
	(-- document --)Tj
	T*
	(createPdf :: PageSize -> [Page] -> String)Tj
	T*
	(createPdf size ps = objString ++ \(trailer objects xrefOffset\) )Tj
	T*
	( where )Tj
	T*
	(  \(objString, objects, xrefOffset\) = arrangeObjects \(static ++ pages\))Tj
	T*
	ET
endstream
endobj
10 0 obj
	2124
endobj
11 0 obj
<<
	/Type/Page
	/Parent 2 0 R
	/Resources 3 0 R
	/Mediabox [0 0 595 842]
	/Contents [12 0 R]
>>
endobj
12 0 obj
	<< /Length 13 0 R >>
stream
	q
	Q
	q
	1.0 0.0 0.0 1.0 20.0 762.0 cm
	BT
	/F1 12 Tf
	12 TL
	(  static = [ objDictionary 1 ["/Type/Catalog", "/Pages 2 0 R"])Tj
	T*
	(           , objDictionary 2 ["/Type/Pages", "/Count " ++ \(show \(length ps\)\))Tj
	T*
	(                             , "/Kids [" ++ kids ++ "]"])Tj
	T*
	(    	   , objDictionary 3 ["/ProcSet [/PDF/Text]", "/Font <</F0 4 0 R /F1 5 0 )Tj
	T*
	(R>>"])Tj
	T*
	(           , objDictionary 4 ["/Type/Font", "/Subtype/Type1")Tj
	T*
	(                             , "/Encoding/WinAnsiEncoding")Tj
	T*
	(                             , "/BaseFont/Helvetica", "/Name/F0" ])Tj
	T*
	(           , objDictionary 5 ["/Type/Font", "/Subtype/Type1")Tj
	T*
	(                             , "/Encoding/WinAnsiEncoding")Tj
	T*
	(                             , "/BaseFont/Courier", "/Name/F1" ])Tj
	T*
	(           , objDictionary 6 ["/Type/Font", "/Subtype/Type1")Tj
	T*
	(                             , "/Encoding/WinAnsiEncoding")Tj
	T*
	(                             , "/BaseFont/Arial", "/Name/F1" ])Tj
	T*
	(           , objDictionary 7 ["/Type/Font", "/Subtype/Type1")Tj
	T*
	(                             , "/Encoding/WinAnsiEncoding")Tj
	T*
	(                             , "/BaseFont/Times", "/Name/F1" ])Tj
	T*
	(           ])Tj
	T*
	(  pages  = translatePages \(pageSize size\) 8 ps)Tj
	T*
	(  kids   = unwords \(take \(length ps\) \(map \(\\n -> \(show \(n\)\) ++ " 0 R"\) [8,11..)Tj
	T*
	(]\)\))Tj
	T*
	(  )Tj
	T*
	(  trailer :: Int -> Int -> String)Tj
	T*
	(  trailer n off = "trailer\\n<<\\n\\t/Size " ++ \(show n\) ++)Tj
	T*
	(    "\\n\\t/Root 1 0 R\\n>>\\nstartxref\\n" ++)Tj
	T*
	(	\(show off\) ++ "\\n%%EOF")Tj
	T*
	(  )Tj
	T*
	(createPage :: [Area] -> Page)Tj
	T*
	(createPage = id)Tj
	T*
	(pageSize :: PageSize -> \(Int, Int, Int, Int\))Tj
	T*
	(pageSize A4 = \(0, 0, 595, 842\))Tj
	T*
	(pageSize _  = error "Unknown pagesize")Tj
	T*
	(-- area --)Tj
	T*
	(position :: Block -> Float -> Float -> Area)Tj
	T*
	(position b x y = \(x, y, b\))Tj
	T*
	(-- block --)Tj
	T*
	(textBlock :: [Command] -> Block)Tj
	T*
	(textBlock = Block )Tj
	T*
	(over :: Block -> Block -> Block)Tj
	T*
	(over \(Block b\) \(Block b'\) = Block \(b++\(Quote "":b'\)\))Tj
	T*
	(under :: Block -> Block -> Block)Tj
	T*
	(under b b' = over b' b)Tj
	T*
	(rightAlign :: Block -> Block)Tj
	T*
	(rightAlign \(Block []\)     = Block [])Tj
	T*
	(rightAlign \(Block \(b:bs\)\) = case b of)Tj
	T*
	(  Tj s      -> Block \(\(shifted s\) ++ rest\))Tj
	T*
	(  Quote s   -> Block \(\(shifted s\) ++ \(T':rest\)\))Tj
	T*
	(  otherwise -> Block \(b:rest\))Tj
	T*
	( where)Tj
	T*
	(  Block rest = rightAlign \(Block bs\))Tj
	T*
	(  shifted s  = )Tj
	T*
	(	\( \(G 1\) )Tj
	T*
	(    : \(Tz \(-100\)\) )Tj
	T*
	(	: \(Tj s\))Tj
	T*
	(    : \(Tz 100\))Tj
	T*
	(    : \(G 0\))Tj
	T*
	(    : [Tj s])Tj
	T*
	(	\))Tj
	T*
	(-- commands --)Tj
	T*
	(setFont :: Font -> Int -> Command )Tj
	T*
	(setFont Helvetica size = Tf "/F0" size)Tj
	T*
	(setFont Courier size   = Tf "/F1" size)Tj
	T*
	ET
endstream
endobj
13 0 obj
	2972
endobj
14 0 obj
<<
	/Type/Page
	/Parent 2 0 R
	/Resources 3 0 R
	/Mediabox [0 0 595 842]
	/Contents [15 0 R]
>>
endobj
15 0 obj
	<< /Length 16 0 R >>
stream
	q
	Q
	q
	1.0 0.0 0.0 1.0 20.0 762.0 cm
	BT
	/F1 12 Tf
	12 TL
	(setFont Arial size     = Tf "/F2" size)Tj
	T*
	(setFont Times size     = Tf "/F3" size)Tj
	T*
	(write :: String -> Command)Tj
	T*
	(write s = Tj s)Tj
	T*
	(writeLn :: String -> Command)Tj
	T*
	(writeLn s = Quote s)Tj
	T*
	(---------------------------------------------------------------------)Tj
	T*
	(-- local helper functions)Tj
	T*
	(-- creates an object )Tj
	T*
	(obj :: Int -> [String] -> Object)Tj
	T*
	(obj n ss = \(show n\) ++ " 0 obj\\n" ++ \(unlines \(map \('\\t':\) ss\)\) ++ "endobj")Tj
	T*
	(-- creates an object containing a dictionary)Tj
	T*
	(objDictionary :: Int -> [String] -> Object)Tj
	T*
	(objDictionary n ss = )Tj
	T*
	(  \(show n\) ++ " 0 obj\\n<<\\n" ++)Tj
	T*
	(  \(unlines \(map \('\\t':\) ss\)\) ++ ">>\\nendobj")Tj
	T*
	(-- creates an object containing a stream)Tj
	T*
	(objStream :: Int -> [String] -> \(Object, Int\))Tj
	T*
	(objStream n ss = )Tj
	T*
	(  \(\(show n\) ++ " 0 obj\\n\\t<< /Length " ++ \(show \(n+1\)\) ++ )Tj
	T*
	(   " 0 R >>\\nstream\\n" ++ ss' ++ "endstream\\nendobj")Tj
	T*
	(  , length ss'\))Tj
	T*
	( where )Tj
	T*
	(  ss' = unlines \(map \('\\t':\) ss\))Tj
	T*
	(-- the pdf-header)Tj
	T*
	(header :: String)Tj
	T*
	(header = "%PDF-1.3\\n%הדֿׂ")Tj
	T*
	(-- concats all objects and add a xref at the end)Tj
	T*
	(arrangeObjects :: [Object] -> \(String, Int, Int\))Tj
	T*
	(arrangeObjects os = \(content ++ xref, objLen, 2 + length content\))Tj
	T*
	( where)Tj
	T*
	(  content   = header ++ concat objects )Tj
	T*
	(  xref      = "\\nxref\\n0 " ++ \(show objLen\) ++ "\\n" ++ refs)Tj
	T*
	(  objLen    = 1 + length objects)Tj
	T*
	(  objects   = map \('\\n':\) os)Tj
	T*
	(  refs      = unlines \("0000000000 65535 f ":\(map makeRef positions\)\))Tj
	T*
	(  makeRef   = \(\\p -> \(reverse \(offset p\)\) ++ " 00000 n "\))Tj
	T*
	(  positions = calcPos \(\(length header\) + 2\) \(map \(\(1 +\) . length\) os\))Tj
	T*
	(  offset    = \(\\p -> take 10 \(\(reverse \(show p\)\)++\(concat \(repeat "0"\)\)\)\))Tj
	T*
	(  )Tj
	T*
	(  calcPos :: Int -> [Int] -> [Int])Tj
	T*
	(  calcPos _ []         = [])Tj
	T*
	(  calcPos start \(x:xs\) = \(start\):\(calcPos \(start+x\) xs\))Tj
	T*
	({-)Tj
	T*
	(-- findFonts :: [Page] -> [String])Tj
	T*
	(findFonts ps = map \(\\\(Tf f _\) -> f\) fonts)Tj
	T*
	( where )Tj
	T*
	(  fonts = filter \(\\x -> case x of Tf _ _ -> True; _ -> False\) commands)Tj
	T*
	(  commands = concat \(concat \(map \(map \(\\\(_,_,c\) -> c\)\) ps\)\))Tj
	T*
	(-})Tj
	T*
	(-- translates all pages to objects)Tj
	T*
	(translatePages :: \(Int, Int, Int, Int\) -> Int -> [Page] -> [Object])Tj
	T*
	(translatePages s@\(x,y,w,h\) n ps = concat \(map makePageObjs pageCommands\))Tj
	T*
	( where )Tj
	T*
	(  pageCommands = zip [n, \(n+3\)..] \(map \(translatePage s\) ps\))Tj
	T*
	(  makePageObjs :: \(Int, [Command]\) -> [Object])Tj
	T*
	(  makePageObjs \(n,cs\) = )Tj
	T*
	(    [ objDictionary n ["/Type/Page", "/Parent 2 0 R", "/Resources 3 0 R" )Tj
	T*
	(	        , "/Mediabox [" ++ \(show x\) ++ " " ++ \(show y\) ++ )Tj
	T*
	(			" " ++ \(show w\) ++ " " ++ \(show h\) ++ "]", "/Contents [" ++ )Tj
	T*
	(			\(show \(n+1\)\) ++ " 0 R]" ])Tj
	T*
	(	, content)Tj
	T*
	ET
endstream
endobj
16 0 obj
	3191
endobj
17 0 obj
<<
	/Type/Page
	/Parent 2 0 R
	/Resources 3 0 R
	/Mediabox [0 0 595 842]
	/Contents [18 0 R]
>>
endobj
18 0 obj
	<< /Length 19 0 R >>
stream
	q
	Q
	q
	1.0 0.0 0.0 1.0 20.0 762.0 cm
	BT
	/F1 12 Tf
	12 TL
	(	, obj \(n+2\) [show \(len\)])Tj
	T*
	(	])Tj
	T*
	(   where)Tj
	T*
	(    \(content, len\) = objStream \(n+1\) \(translate cs\))Tj
	T*
	( )Tj
	T*
	(-- combines all areas in a page)Tj
	T*
	(translatePage :: \(Int, Int, Int, Int\) -> Page -> [Command])Tj
	T*
	(translatePage s ps =  Q : \(concat \(map \(translateArea s\) ps\)\))Tj
	T*
	(-- creates a list of commands from an area)Tj
	T*
	(translateArea :: \(Int, Int, Int, Int\) -> Area -> [Command])Tj
	T*
	(translateArea \(sx,sy,sw,sh\) = )Tj
	T*
	(  \(\\\(x,y,Block b\) -> )Tj
	T*
	(    \()Tj
	T*
	(	  Qq :)Tj
	T*
	(	  \(Cm 1 0 0 1 \(x-\(fromInt sx\)\) \(\(fromInt sh\)-\(y-\(fromInt sy\)\)\)\) :)Tj
	T*
	(	  \(BT:b\))Tj
	T*
	(	\) ++ [ET]\))Tj
	T*
	(-- translates commands to text)Tj
	T*
	(translate :: [Command] -> [String])Tj
	T*
	(translate []              = [])Tj
	T*
	(translate \(Td x y:cs\)  = \(\(show x\) ++ " " ++ \(show y\) ++ " Td"\) : \(translate c)Tj
	T*
	(s\))Tj
	T*
	(translate \(Tf f s:cs\)  = \(f ++ " " ++ \(show s\) ++ " Tf"\) : \(\(show s\) ++ " TL"\))Tj
	T*
	( : \(translate cs\))Tj
	T*
	(translate \(TL l:cs\)    = \(\(show l\) ++ " TL"\) : \(translate cs\))Tj
	T*
	(translate \(Quote s:cs\) = \("\(" ++ \(escape s\) ++ "\)Tj"\) : "T*" : \(translate cs\))Tj
	T*
	(translate \(Tj s:cs\)    = \("\(" ++ \(escape s\) ++ "\)Tj"\) : \(translate cs\))Tj
	T*
	(translate \(Tc c:cs\)    = \(\(show c\) ++ " Tc"\) : \(translate cs\))Tj
	T*
	(translate \(Tw w:cs\)    = \(\(show w\) ++ " Tw"\) : \(translate cs\))Tj
	T*
	(translate \(Tr r:cs\)    = \(\(show r\) ++ " Tr"\) : \(translate cs\))Tj
	T*
	(translate \(Tz z:cs\)    = \(\(show z\) ++ " Tz"\) : \(translate cs\))Tj
	T*
	(translate \(G g:cs\)     = \(\(show g\) ++ " g"\) : \(translate cs\))Tj
	T*
	(translate \(T':cs\)      = "T*" : \(translate cs\))Tj
	T*
	(translate \(Q:cs\)      = "q" : \(translate cs\))Tj
	T*
	(translate \(Qq:cs\)      = "Q" : "q" : \(translate cs\))Tj
	T*
	(translate \(BT:cs\)      = "BT" : \(translate cs\))Tj
	T*
	(translate \(ET:cs\)      = "ET" : \(translate cs\))Tj
	T*
	(translate \(Cm a b c d e f:cs\) = )Tj
	T*
	(  \(\(show a\) ++ " " ++ )Tj
	T*
	(   \(show b\) ++ " " ++ )Tj
	T*
	(   \(show c\) ++ " " ++ )Tj
	T*
	(   \(show d\) ++ " " ++ )Tj
	T*
	(   \(show e\) ++ " " ++ )Tj
	T*
	(   \(show f\) ++ " cm"\) : \(translate cs\))Tj
	T*
	(-- escape \( \) and \\ characters with an extra \\)Tj
	T*
	(escape :: String -> String)Tj
	T*
	(escape []        = [])Tj
	T*
	(escape \('\(':ss\)  = '\\\\':'\(':\(escape ss\))Tj
	T*
	(escape \('\)':ss\)  = '\\\\':'\)':\(escape ss\))Tj
	T*
	(escape \('\\\\':ss\) = '\\\\':'\\\\': \(escape ss\))Tj
	T*
	(escape \(s:ss\)    = s:\(escape ss\))Tj
	T*
	ET
endstream
endobj
19 0 obj
	2707
endobj
xref
0 20
0000000000 65535 f 
0000000016 00000 n 
0000000066 00000 n 
0000000146 00000 n 
0000000220 00000 n 
0000000327 00000 n 
0000000432 00000 n 
0000000535 00000 n 
0000000638 00000 n 
0000000748 00000 n 
0000002926 00000 n 
0000002948 00000 n 
0000003060 00000 n 
0000006087 00000 n 
0000006109 00000 n 
0000006221 00000 n 
0000009467 00000 n 
0000009489 00000 n 
0000009601 00000 n 
0000012363 00000 n 
trailer
<<
	/Size 20
	/Root 1 0 R
>>
startxref
12385
%%EOF